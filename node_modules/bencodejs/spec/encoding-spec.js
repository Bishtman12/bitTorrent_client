describe('Encoding', function(){
    const Bencode = require('../lib');

    it('should handle integers', function(){
       expect(Bencode.encode(42).toString()).toEqual('i42e');
       expect(Bencode.encode(1234566).toString()).toEqual('i1234566e');
    });

    it('should handle strings', function(){
       expect(Bencode.encode('spam').toString()).toEqual('4:spam');
       expect(Bencode.encode('muchlongwordwoahlookatthat').toString()).toEqual('26:muchlongwordwoahlookatthat');
    });

    it('should handle arrays', function(){
       const arr1 = ['woah', 'this', 'is', 'an', 'array', 'with', 'much', 'data'];
       expect(Bencode.encode(arr1).toString()).toEqual('l4:woah4:this2:is2:an5:array4:with4:much4:datae');
    });

    it('should handle dictionaries', function(){
       const obj1 = {'cow': 'moo', 'spam': 'eggs'};
       const obj2 = {"t":"aa", "y":"q", "q":"ping", "a":{"id":"abcdefghij0123456789"}};
       const obj3 = {"t":"aa", "y":"r", "r": {"id":"mnopqrstuvwxyz123456"}};
       expect(Bencode.encode(obj1).toString()).toEqual('d3:cow3:moo4:spam4:eggse');
       expect(Bencode.encode(obj2).toString()).toEqual('d1:ad2:id20:abcdefghij0123456789e1:q4:ping1:t2:aa1:y1:qe');
       expect(Bencode.encode(obj3).toString()).toEqual('d1:rd2:id20:mnopqrstuvwxyz123456e1:t2:aa1:y1:re');
    });

    it('should handle more complex structures', function(){
       const data = {
           'list':['item1', 'item2', {'key':'value'}, 1234],
           'number': 432423,
           'dict':{
               'key':['item1', 'item2'],
               'key2': 1234,
               'key3': 'value'
           },
           'string':'stringgggggg'
       };
       expect(Bencode.encode(data).toString()).toEqual('d4:dictd3:keyl5:item15:item2e4:key2i1234e4:key35:valuee4:listl5:item15:item2d3:key5:valueei1234ee6:numberi432423e6:string12:stringgggggge');
    });
});
