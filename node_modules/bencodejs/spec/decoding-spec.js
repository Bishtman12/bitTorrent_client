describe('Decoding', function(){
   const Bencode = require('../lib');
   const _ = require('underscore');

   const objectEquality = function(f, s){
        if(typeof f == 'object' && typeof s == 'object'){
            return _.isEqual(f, s);
        }
   };

   beforeEach(function(){
       jasmine.addCustomEqualityTester(objectEquality);
   });

   it('should decode integers', function(){
      expect(Bencode.decode('i42e')).toEqual(42);
      expect(Bencode.decode('i1234566e')).toEqual(1234566);
   });

    it('should decode strings', function(){
        expect(Bencode.decode('4:spam').toString()).toEqual('spam');
        expect(Bencode.decode('26:muchlongwordwoahlookatthat').toString()).toEqual('muchlongwordwoahlookatthat');
    });

    it('should handle arrays', function(){
        const data1 = 'l4:woah4:this2:is2:an5:array4:with4:much4:datae';
        const arr1 = ['woah', 'this', 'is', 'an', 'array', 'with', 'much', 'data'];
        expect(Bencode.decode(data1).toString()).toEqual(arr1.toString());
    });

    it('should decode dictionaries', function(){
        const obj1s = 'd3:cow3:moo4:spam4:eggse';
        const obj2s = 'd1:ad2:id20:abcdefghij0123456789e1:q4:ping1:t2:aa1:y1:qe';
        const obj3s = 'd1:rd2:id20:mnopqrstuvwxyz123456e1:t2:aa1:y1:re';
        const obj1 = {'cow': 'moo', 'spam': 'eggs'};
        const obj2 = {"t":"aa", "y":"q", "q":"ping", "a":{"id":"abcdefghij0123456789"}};
        const obj3 = {"t":"aa", "y":"r", "r": {"id":"mnopqrstuvwxyz123456"}};
        expect(Bencode.decode(obj1s, 'ascii')).toEqual(obj1);
        expect(Bencode.decode(obj2s, 'ascii')).toEqual(obj2);
        expect(Bencode.decode(obj3s, 'ascii')).toEqual(obj3);
    });

    it('should handle more complex structures', function(){
        const datas = 'd4:dictd3:keyl5:item15:item2e4:key2i1234e4:key35:valuee4:listl5:item15:item2d3:key5:valueei1234ee6:numberi432423e6:string12:stringgggggge';
        const data = {
            'dict':{
                'key':['item1', 'item2'],
                'key2': 1234,
                'key3': 'value'
            },
            'number': 432423,
            'list':['item1', 'item2', {'key':'value'}, 1234],
            'string':'stringgggggg'
        };
        expect(Bencode.decode(datas, 'ascii')).toEqual(data);
    });
});