import {strToInt, getIndex} from './utils';

export default (function(){
    const END_MARKER = 0x65;
    const COLON_MARKER = 0x3a;
    const LIST_MARKER = 0x6c;
    const DICT_MARKER = 0x64;
    const INTEGER_MARKER = 0x69;
    let pos = 0, buffer = null, result = null, encoding = null;
    /**
     * @name decode
     * @desc Decodes data encoded in the bencoded format.
     * @param buf{Buffer}
     * @param enc{String}
     * @returns {Buffer|String|Number|Array|Object}
     */
    function decode(buf, enc){
        if(buffer) reset();
        if(!Buffer.isBuffer(buf))
            buf = Buffer.from(buf);
        buffer = buf;
        encoding = enc;
        result = _decode();
        return result;
    }
    /**
     * @name reset
     * @desc Resets buffer.
     * @private
     */
    function reset(){
        pos = 0;
        buffer = result = encoding = null;
    }
    /**
     * @name decode
     * @desc Decodes data that was bencoded.
     * @private
     */
    function _decode(){
        if(buffer[pos] == INTEGER_MARKER){
            return decode_integer();
        } else if(buffer[pos] == LIST_MARKER){
            return decode_list();
        } else if(buffer[pos] == DICT_MARKER) {
            return decode_dict();
        } else {
            return decode_string();
        }
    }
    /**
     * @name decode_integer
     * @returns {Number}
     * @private
     */
    function decode_integer(){
        pos += 1;
        const e = getIndex(buffer, END_MARKER, pos);
        const i = strToInt(buffer.toString('ascii', pos, e));
        pos += i.toString().length + 1;
        return i;
    }
    /**
     * @name decode_string
     * @returns {String}
     * @private
     */
    function decode_string(){
        const c = getIndex(buffer, COLON_MARKER, pos);
        const l = strToInt(buffer.toString('ascii', pos, c));
        pos += l.toString().length + 1;
        let s = buffer.slice(pos, pos + l);
        if(encoding)
            s = s.toString(encoding);
        pos += l;
        return s;
    }
    /**
     * @name decode_list
     * @private
     */
    function decode_list(){
        pos += 1;
        const list = [];
        while(pos < buffer.length
        && buffer[pos] != END_MARKER)
            list.push(_decode());
        pos += 1;
        return list;
    }
    /**
     * @name decode_dict
     * @private
     */
    function decode_dict(){
        pos += 1;
        const dict = {};
        while(pos < buffer.length
        && buffer[pos] != END_MARKER){
            dict[decode_string()] = _decode();
        }
        pos += 1;
        return dict;
    }
    return decode;
})();